

//  Parameters

//func uex= exp(-2*pi^(2)*t)*sin(pi*x)*sin(pi*y);
//func f=x*y;
real a=1.,b=1.; //lenth of semimajor axis  semiminor axis
//func uex= sin(x^2 +y^2 -1);
func uex= sin(pi*x)*sin(pi*y);

real theta=4.*pi/3;
//func f=1;
func z= 0;
func g=0;  //NBC
func f=2*pi^(2)*sin(pi*x)*sin(pi*y);

//define the mesh boundary

border Gamma1(t=0,theta) {x=a*cos(t); y=b*sin(t); }
border Gamma2(t=theta,2*pi) {x=a*cos(t); y=b*sin(t); }

// build the mesh
mesh Th= buildmesh(Gamma1(100) +Gamma2(50)); 




// Fespace
fespace Vh(Th,P1); // P1 conforming triangular finite element space
Vh u,v;

 
 
 
// Problem (resolution of laplace equation)
solve Laplace(u, v) =int2d(Th)(
    dx(u)*dx(v) + dy(u)*dy(v))

   - int2d(Th) (f*v) -int1d(Th, Gamma2)(g*v)
   + on(Gamma1, u=z);





plot(u, wait=true, ps="Poisson.eps"); 
plot( Th, wait=true, ps="membraneTh.eps"); //plot Th


//Error 
Vh err=u-uex;


cout << "error L2 = " << sqrt( int2d(Th)(err^2) )<< endl;

 